[ { "title": "Chapter 01 - Introduction to Python for Finance", "url": "/posts/Introduction-to-Python-for-Finance/", "categories": "Python", "tags": "notes, python, datacamp, data, analyst", "date": "2022-10-15 19:00:00 +0200", "snippet": "Introduction to Python for FinanceDive into data science using Python and learn how to effectively analyze and visualize your data. No coding experience or skills needed.Course DescriptionBegin your journey into Data Science! Even if you’ve never written a line of code in your life, you’ll be able to follow this course and witness the power of Python to perform Data Science. You’ll use data to solve the mystery of Bayes, the kidnapped Golden Retriever, and along the way you’ll become familiar with basic Python syntax and popular Data Science modules like Matplotlib (for charts and graphs) and pandas (for tabular data).Welcome to PythonVariables can be used to store information and can be used to complete functionsrevenue_1 = 229.23revenue_2 = 177.86revenue_3 = 89.95total = revenue_1+revenue_2+revenue_3print(total)Find the average revenue of the three revenues above!average = total/3print(average)Variable Data TypesThere are four data type in Python: Strings (str)- ‘hello world’ Integers (int)- 40 Floats (float)- 3.1417 Booleens (bool)- True or FalseBoolean Data TypesVairables in Python may consist of three data types.Strings require ‘_ _ _’ to enclose the variablecompany_1 = 'Apple'print(company_1)Intergers do not require anything additionalyear_1 = 2017print(year_1)Floats also do not require any additional informationrevenue_1 = 229.23print(revenue_1)Determining TypesPython has a built-in command type() that can determine the type of a variable or literal value.print(type(company_1))print(type(year_1))print(type(revenue_1))Booleans in PythonBooleans are values that are either True or False. Boolean comparisons include:operators descriptions:\\ &gt; greater than\\ &gt;= greater than or equal&lt; less than&lt;= less than or equal== equal!= does not equal# Test equalitytest_company = 'apple'print(company_1 == test_company)# Compare revenue_1 and revenue_2print(revenue_1 &gt; revenue_2)Combining data typesStrings and Floats cannot be mathematically combined.To convert a variable x to an integer, you can use the command int(x)To convert a variable y to a string, you can use the command str(y)# Update data typesyear_1_str = str(year_1)revenue_1_str = str(revenue_1)# Create a complete sentence combining only the string data typessentence = 'The revenue of ' + company_1 + ' in ' + year_1_str + ' was $' + revenue_1_str + ' billion.'# Print sentenceprint(sentence)Listsmonths=['Jan','Feb','Mar','Apr','May','June']months[0]months[3]months[-1]months[-2]SlicingSlicing takes a specified series of contents out of a list.Remember, this syntax indicates subsetting all elements from the start and up to but not including the end element.months[2:5]months[-4:-1]Extended slicing with listsmonths[3:]months[:3]Slicing with stepsmyslist[startAt : endBefore : step]default step size is 1months[0:6:2]months[0:6:3]Exercise# Create and print list namesnames = [\"Apple Inc\",\"Coca-Cola\",\"Walmart\"]print(names)# Create and print list pricesprices = [159.54,37.13,71.17]print(prices)# Print the first item in namesprint(names[0])# Print the second item in namesprint(names[1])# Print the last element in pricesprint(prices[-1])# namesnames = ['Apple Inc', 'Coca-Cola', 'Walmart']# Use slicing on list namesnames_subset = names[-2:]print(names_subset)# pricesprices = [159.54, 37.13, 71.17]# Use extended slicing on the list pricesprices_subset = prices[:2]print(prices_subset)List Inside of a List# Create and print the nested list stocksstocks = [names,prices]print(stocks)# Use list indexing to obtain the list of pricesprint(stocks[1])Subset a nested liststocks = [['Apple Inc', 'Coca-Cola', 'Walmart'], [159.54, 37.13, 71.17]]# Use indexing to obtain company name Coca-Colaprint(stocks[0][1])# Use indexing to obtain 71.17print(stocks[1][2])Methods and FunctionsMethods are a subset of functions. ie all methods are functions but not all functions are methods.Functions take objects as inputs are are “passed” an object. e.g type(prices), min(prices), max(prices)Methods act on objects. e.g list.sort(), list.append(), list.extend(), list.index()Exercises# Print the sorted list pricesprices = [159.54, 37.13, 71.17]prices.sort()print(prices)# Find the maximum price in the list priceprice_max = max(prices)print(price_max).append() increases the lenght of a list by one.extend() increase the length of the list by the number of elelemtbst that are provided to the methods# Append a name to the list namesnames.append('Amazon.com')print(names)# Extend list namesmore_elements = ['DowDuPont', 'Alphabet Inc']names.extend(more_elements)print(names).index() return the index of the element specifiedprices = [159.54, 37.13, 71.17, 1705.54, 66.43, 1132.34]# Do not modify thismax_price = max(prices)print(prices)print(max_price)# Identify index of max pricemax_index = prices.index(max_price)print(max_index)# Identify the name of the company with max pricemax_stock_name = names[max_index]print(max_stock_name)# Fill in the blanks print('The largest stock price is associated with ' + max_stock_name + ' and is $' + str(max_price) + '.')Arrayspip3 install package_name_hereimport package_name_hereCreate an arrayYou can use the NumPy package to create arrays. NumPy arrays are optimized for numerical analyses and contain only a single data type. To convert a list to an array, you can use the array() function from NumPy.# Import numpy as npimport numpy as np# Listsprices = [170.12, 93.29, 55.28, 145.30, 171.81, 59.50, 100.50]earnings = [9.2, 5.31, 2.41, 5.91, 15.42, 2.51, 6.79]# NumPy arraysprices_array = np.array(prices)earnings_array = np.array(earnings)# Print the arraysprint(prices_array)print(earnings_array)Elementwise operations on arraysArrays allow for efficient numerical manipulation of its elements. Let’s explore element-wise mathematical operations by calculating price to earnings ratio using two arrays, prices_array and earnings_array from the previous exercise.This price to earnings ratio, or PE ratio, is a financial indicator of the dollar amount an investor can expect to invest in a company in order to receive one dollar of that company’s earnings.# Import numpy as npimport numpy as np# Create PE ratio arraype_array = prices_array/earnings_array# Print pe_arrayprint(pe_array)# Subset the first three elementsprices_subset_1 = prices_array[0:3]print(prices_subset_1)# Subset last three elements prices_subset_2 = prices_array[4:]print(prices_subset_2)# Subset every third elementprices_subset_3 = prices_array[0:7:3]print(prices_subset_3)2D arrays and functionsArrays in numpy can also be 2 dimensional.array=np.array([months,prices]).shape gives you the dimensions of an arraye.g print(cpi_array.shape)(2,3) → 2 rows and 3 colums.size gives you total number of elements in the arraye.g print(cpi_array.size)6np.mean calculates the mean of an inputprint(np.mean(prices_array))np.std() calculates the standard deviation of an inputprint(np.std(prices_array))numpy.arange() creates an array with start, end, step (default step size = 1)months = np.arange(1,13)print(months)[1 2 3 4 5 6 7 8 9 10 11 12]numpy.transpose() switches rows and columns of a numpy array (2,3) → (3,2)Array indexing for 2D arraysrow index 1, column index 2array[1,2]all row slice, thrid columnprint(array[:,2])# Create a 2D array of prices and earningsstock_array = np.array([prices,earnings])print(stock_array)# Print the shape of stock_arrayprint(stock_array.shape)# Print the size of stock_arrayprint(stock_array.size)# Transpose stock_array n.b numpy is set as npstock_array_transposed = np.transpose(stock_array)print(stock_array_transposed)# Print the shape of stock_arrayprint(stock_array_transposed.shape)# Print the size of stock_arrayprint(stock_array_transposed.size)Subsetting 2D arraysSubsetting 2D arrays is similar to subsetting nested lists. In a 2D array, the indexing or slicing must be specific to the dimension of the array:array[row_index, column_index]# Extract the first column from stock_array_transposed and assign it to prices.# Subset prices from stock_array_transposedprices = stock_array_transposed[:, 0]print(prices)# Extract the second column from stock_array_transposed and assign it to earnings.# Subset earnings from stock_array_transposedearnings = stock_array_transposed[:,1]print(earnings)# Subset the price and earning of the first company (row 0) from stock_array_transposed and assign it to company_1.# Subset the price and earning for first companycompany_1 = stock_array_transposed[0,:]print(company_1)Calculating Array StatsNot only can you perform elementwise calculations on NumPy arrays, you can also calculate summary stats such as mean and standard deviation of arrays using functions from NumPy.prices = [170.12, 93.29, 55.28, 145.30, 171.81, 59.50, 100.50]# Calculate the mean prices_mean = np.mean(prices)print(prices_mean)# Calculate the standard deviation prices_std = np.std(prices)print(prices_std)Generating a sequence of numbersYou may want to create an array of a range of numbers (e.g., 1 to 10) without having to type in every single number. The NumPy function arange() is an efficient way to create numeric arrays of a range of numbers. The arguments for arange() include the start, stop, and step interval as shown below:np.arange(start, stop, step)(numpy is imported as np)# Create an array company_ids containing the numbers 1 through 7 (inclusive).# Create and print company IDscompany_ids = np.arange(1, 8, 1)print(company_ids)# Create an array company_ids_odd containing only the odd numbers from 1 through 7 (inclusive).# Use array slicing to select specific company IDscompany_ids_odd = np.arange(1, 8, 2)print(company_ids_odd)Using arrays for analysisNumpy arrays can also be indexed with other arrays.months_array = np.array(['Jan','Feb','Mar','Apr','May', 'Jun'])indexing_array = np.array([1,3,5])months_subset = months_array[indexing_array]print(months_subset)negative_index = np.array([-1,-2])print(months_array[negative_index])boolean_array = np.array([True,True,True,False,False,False])print((months_array[boolean_array]))More on Boolean arraysprices_array = np.array([238.11,237.81,238.91])# Create a Boolean Arrayboolean_array = (prices_array &gt; 238)print(boolean_array)print(prices_array[boolean_array])print(prices_array)# Find the meanprice_mean = np.mean(prices_array)print(price_mean)# Create boolean arrayboolean_array = (prices_array &gt; price_mean)print(boolean_array)# Select prices that are greater than averageabove_avg = (prices_array[boolean_array])print(above_avg)import numpy as npnames = ['Apple Inc','Abbvie Inc','Abbott Laboratories','Accenture Technologies','Allergan Plc']sector = ['Information Technology','Health Care','Health Care','Information Technologies','Health Care']names_array = np.array(names)sector_array = np.array(sector)# Find elements in sectors that are equivalent to 'Health Care' and assign the result to boolean_array.# Create boolean arrayboolean_array = (sector_array == 'Health Care')print(boolean_array)# Subset names using boolean_array and assign the result to health_care.# Print only health care companieshealth_care = (names_array[boolean_array])print(health_care)[False True True False True]['Abbvie Inc' 'Abbott Laboratories' 'Allergan Plc']Visualisations in Pythonplt.plot() takes arguements that describe the data to be plottedplt.show() displays plot to screenplt.xlabel()plt.ylabel()plt.title()plt.scatter()Importing matplotlib and pyplotPyplot is a collection of functions in the popular visualization package Matplotlib. Its functions manipulate elements of a figure, such as creating a figure, creating a plotting area, plotting lines, adding plot labels, etc.import matplotlib.pyplot as pltdays = [1, 2, 3, ... , 2337, 2338]prices = [78.72, 78.31, 75.98, ... , 1103.68, 1094.22]# Import matplotlib.pyplot with the alias pltimport matplotlib.pyplot as plt# Plot the price of stock over timeplt.plot(days, prices, color=\"red\", linestyle=\"--\")# Display the plotplt.show()Adding axis labels and titles# Plot the price of stock over timeplt.plot(days, prices, color=\"red\", linestyle=\"--\")# Add x and y labelsplt.xlabel('Days')plt.ylabel('Prices, $')# Add plot titleplt.title('Company Stock Prices Over Time')# Display the plotplt.show()days = [1, 2, 3, ... , 1259, 1260]prices1 = [78.72, 78.31, ... 298.94, 303.4]prices2 = [62.957142000000005, 62.185715, 62.971428, ..., 192.449997, 193.059998]# Plot the second line of green colourplt.plot(days, prices1, color='red')plt.plot(days, prices2, color='green')# Add labelsplt.xlabel('Days')plt.ylabel('Prices, $')plt.title('Stock Prices Over Time')plt.show()ScatterplotsThe pyplot module can also be used to make other types of plots, like scatterplots.days = [1, 2, 3, ..., 2337, 2338]prices = [78.72, 78.31, 75.98, ..., 1103.68, 1094.22]# Plot price as a function of timeplt.scatter(days, prices, color='green', s=0.1)# Show plotplt.show()" }, { "title": "Chapter 02 - Intermediate Python", "url": "/posts/Intermediate-Python/", "categories": "Python", "tags": "notes, python, datacamp, data, analyst", "date": "2022-10-15 19:00:00 +0200", "snippet": "Intermediate PythonLevel up your data science skills by creating visualizations using Matplotlib and manipulating DataFrames with pandas.Course DescriptionLearning Python is crucial for any aspiring data science practitioner. Learn to visualize real data with Matplotlib’s functions and get acquainted with data structures such as the dictionary and pandas DataFrame. This four-hour intermediate course will help you to build on your existing Python skills and explore new Python applications and functions that expand your repertoire and help you work more efficiently.You’ll discover how dictionaries offer an alternative to Python lists, and why the pandas dataframe is the most popular way of working with tabular data. In the second chapter of this course, you’ll find out how you can create and manipulate datasets, and how to access them using these structures. Hands-on practice throughout the course will build your confidence in each area.As you progress, you’ll look at logic, control flow, filtering and loops. These functions work to control decision-making in Python programs and help you to perform more operations with your data, including repeated statements. You’ll finish the course by applying all of your new skills by using hacker statistics to calculate your chances of winning a bet.Once you’ve completed all of the chapters, you’ll be ready to apply your new skills in your job, new career, or personal project, and be prepared to move onto more advanced Python learning.import numpy as npimport matplotlib.pyplot as pltimport pandas as pd# import dataworld = pd.read_csv('/DataCamp/data/world.csv')print(world.head())# Specify c and alpha inside plt.scatter()plt.scatter(x = world['gdp_cap'], y = world['life_exp'], s = world['pop'] * 2, c = np.array(world['col']), alpha = 0.8)# Previous customizationsplt.xscale('log') plt.xlabel('GDP per Capita [in USD]')plt.ylabel('Life Expectancy [in years]')plt.title('World Development in 2007')plt.xticks([1000,10000,100000], ['1k','10k','100k'])# Show the plotplt.show() gdp_cap life_exp pop col0 974.580338 43.828 31.889923 red1 5937.029526 76.423 3.600523 green2 6223.367465 72.301 33.333216 blue3 4797.231267 42.731 12.420476 blue4 12779.379640 75.320 40.301927 yellowInterpretationIf you have a look at your colorful plot, it’s clear that people live longer in countries with a higher GDP per capita. No high income countries have really short life expectancy, and no low income countries have very long life expectancy. Still, there is a huge difference in life expectancy between countries on the same income level. Most people live in middle income countries where difference in lifespan is huge between countries; depending on how income is distributed and how it is used.What can you say about the plot?DictorionariesDictionaires connectct corresponding elements in two or more lists without requiring indexing. To create the dictionary, you need curly brackets. inside the curly brackets, you have a bunch of what are called key:value pairs.Using the index method looks like:pop = [30.55, 2.77, 39.21]countries = [\"afghanistan\", \"albania\", \"algeria\"]ind_alb = countries.index(\"albania\")ind_albpop[ind_alb]Dictionary Method looks like:pop = [30.55, 2.77, 39.21]countries = [\"afghanistan\", \"albania\", \"algeria\"]world = {\"afghanistan\":30.55, \"albania\":2.77, \"algeria\":39.21}print(world[\"albania\"])Printing keys can be done so as for exampleprint(world.keys())To add or update a new key-value pair, you can use something like this:europe['iceland'] = 20To check if something is a key in a dictionary use something like (T/F):print('iceland' in europe)To remove something from a dictionary use:del(world['iceland'])To fetch information from a dictionary that is more sophisticated use chained square brackets:europe['spain']['population']To create a sub-dictionary and add it to a dictionary you can use:europe = { 'spain': { 'capital':'madrid', 'population':46.77 }, 'france': { 'capital':'paris', 'population':66.03 }, 'germany': { 'capital':'berlin', 'population':80.62 }, 'norway': { 'capital':'oslo', 'population':5.084 } }data = {'capital':'rome', 'population':59.83}europe['italy'] = dataPandas, Part 1Build a DataFrame is from a dictionary# Pre-defined listsnames = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']dr = [True, False, False, False, True, True, True]cpc = [809, 731, 588, 18, 200, 70, 45]# Import pandas as pdimport pandas as pd# Create dictionary my_dict with three key:value pairs: my_dictmy_dict = {\"country\":names,\"drives_right\":dr,\"cars_per_cap\":cpc,}# Build a DataFrame cars from my_dict: carscars = pd.DataFrame(my_dict)# Print carsprint(cars)Specify the row labelscars.index = [row_labels]Import CSV data into Python as a Pandas DataFramecars = pd.read_csv('cars.csv')these steps can be combined so that:cars = pd.read_csv('cars.csv'm index_col = 0)Square bracketscars['cars_per_cap']cars[['cars_per_cap']]The single bracket version gives a Pandas Series, the double bracket version gives a Pandas DataFrame.The following call selects the first five rows from the cars DataFrame:cars[0:5]N.B you’re using the integer indexes of the rows here, not the row labels! i.e. first row = 0, label≠0loc and ilocWith loc and iloc you can do practically any data selection operation on DataFrames you can think of. loc is label-based, which means that you have to specify rows and columns based on their row and column labels. iloc is integer index based, so you have to specify rows and columns by their integer index like you did in the previous exercise.cars.loc['RU']cars.iloc[4]cars.loc[['RU']]cars.iloc[[4]]cars.loc[['RU', 'AUS']]cars.iloc[[4, 1]]loc and iloc also allow you to select both rows and columns from a DataFramecars.loc['IN', 'cars_per_cap']cars.iloc[3, 0]cars.loc[['IN', 'RU'], 'cars_per_cap']cars.iloc[[3, 4], 0]cars.loc[['IN', 'RU'], ['cars_per_cap', 'country']]cars.iloc[[3, 4], [0, 1]]It’s also possible to select only columns with loc and iloc. In both cases, you simply put a slice going from beginning to end in front of the comma:cars.loc[:, 'country'] #seriescars.iloc[:, 1]cars.loc[:, ['country','drives_right']] # dfcars.iloc[:, [1, 2]]Comparison Operators equal → == inequality → != less than → &lt;- greater than → &gt; g.eq → &gt;= l.eq → &lt;=bBoolean OperatorsBefore, the operational operators like &lt; and &gt;= worked with Numpy arrays out of the box. Unfortunately, this is not true for the boolean operators and, or, and not.To use these operators with Numpy, you will need np.logical_and(), np.logical_or() and np.logical_not(). Here’s an example on the my_house and your_house arrays from before to give you an idea:np.logical_and(my_house &gt; 13, your_house &lt; 15)To experiment with if and else a bit, have a look at this code sample:area = 10.0if(area &lt; 9) : print(\"small\")elif(area &lt; 12) : print(\"medium\")else : print(\"large\")Filtering pandas DataFramesFilter pandas DataFrames as follows: Step 1. select the column you are interested in: brics[\"area\"] # or brics.loc[:,\"area\"] or brics.iloc[:,2] Step 2. Compare is_huge = brics[\"area\"] &gt; 8 Step 3. subset df brics[is_huge] or all in one step: brics[brics[\"area\"] &gt; 8] Remember about np.logical_and(), np.logical_or() and np.logical_not()You can also use them on Pandas Series to do more advanced filtering operations.cpc = cars['cars_per_cap']between = np.logical_and(cpc &gt; 10, cpc &lt; 80)medium = cars[between]While LoopingBelow you can find the example from the video where the error variable, initially equal to 50.0, is divided by 4 and printed out on every run:# Initialize offsetoffset = -6# Code the while loopwhile offset != 0 : print(\"correcting...\") if offset &gt; 0 : offset = offset - 1 else : offset = offset + 1 print(offset)For Loopingfam = [1.73, 1.68, 1.71, 1.89]for height in fam : print(height)If you also want to access the index information, so where the list element you’re iterating over is located, you can use enumerate().# areas listareas = [11.25, 18.0, 20.0, 10.75, 9.50]# Change for loop to use enumerate() and update print()for room_number, area in enumerate(areas) : print(\"room \" +str(room_number+1) +\":\"+str(area))Loop over list of lists# house list of listshouse = [[\"hallway\", 11.25], [\"kitchen\", 18.0], [\"living room\", 20.0], [\"bedroom\", 10.75], [\"bathroom\", 9.50]] # Build a for loop from scratchfor x in house : print(\"the \" + x[0] + \" is \" + str(x[1])+\" sqm\")the hallway is 11.25 sqmthe kitchen is 18.0 sqmthe living room is 20.0 sqmthe bedroom is 10.75 sqmthe bathroom is 9.5 sqmLoop over dictionary# Definition of dictionaryeurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' } # Iterate over europefor key, value in europe.items() : print(\"the capital of \" + str(key) + \" is \" + str(value))the capital of spain is madridthe capital of france is paristhe capital of germany is berlinthe capital of norway is oslothe capital of italy is romethe capital of poland is warsawthe capital of austria is viennaLoop over Numpy arrayIf you’re dealing with a 1D Numpy array, looping over all elements can be as simple as:for x in my_array : print(str(x) + \" cm\")If you’re dealing with a 2D Numpy array, it’s more complicated. A 2D array is built up of multiple 1D arrays. To explicitly iterate over all separate elements of a multi-dimensional array, you’ll need this syntax:for x in np.nditer(my_array) : print(str(x) + \" cm\")Loop over DataFrameIterating over a Pandas DataFrame is typically done with the iterrows() method. Used in a for loop, every observation is iterated over and on every iteration the row label and actual row contents are available:for lab, row in brics.iterrows() : ...e.g# Import cars dataimport pandas as pdcars = pd.read_csv('cars.csv', index_col = 0)# Adapt for loopfor lab, row in cars.iterrows() : print(str(lab)+\": \"+str(row['cars_per_cap']))add column# Import cars dataimport pandas as pdcars = pd.read_csv('cars.csv', index_col = 0)# Code for loop that adds COUNTRY columnfor lab, row in cars.iterrows(): cars.loc[lab,\"COUNTRY\"]= (row['country']).upper()# Print carsprint(cars)If you want to add a column to a DataFrame by calling a function on another column, the iterrows() method in combination with a for loop is not the preferred way to go. Instead, you’ll want to use apply().Compare the iterrows() version with the apply() version to get the same result in the brics DataFrame:# Import cars dataimport pandas as pdcars = pd.read_csv('cars.csv', index_col = 0)# Use .apply(str.upper)cars[\"COUNTRY\"] = cars[\"country\"].apply(str.upper)print(cars)Random floatrandom is a sub-package of numpyFrom the random sub-package there are two functions that will be used: seed() and rand()# Import numpy as npimport numpy as np# Set the seednp.random.seed(123)# Generate and print random floatprint(np.random.rand())Roll the dicerandint() generates intergers randomlyHere is an example that returns intergers found on a diceimport numpy as npprint(np.random.randint(1, 7))Here is an example using randint that could be implemented in a gameimport numpy as npnp.rand.seed(123)# Starting stepstep = 50# Roll the dicedice = np.random.randint(1,7)# Finish the control constructif dice &lt;= 2 : step = step - 1elif dice &lt;= 5 : step = step + 1else : step = step + np.random.randint(1,7)# Print out dice and stepprint(dice)print(step)Randomwalk# Numpy is imported, seed is setimport numpy as npnp.random.seed(123)# Initialize random_walkrandom_walk = [0]# Complete the ___for x in range(100) : # Set step: last element in random_walk step = random_walk[-1] # Roll the dice dice = np.random.randint(1,7) # Determine next step if dice &lt;= 2: # Replace below: use max to make sure step can't go below 0 step = max(0, step - 1) elif dice &lt;= 5: step = step + 1 else: step = step + np.random.randint(1,7) # append next_step to random_walk random_walk.append(step)# Print random_walkprint(random_walk)# Import matplotlib.pyplot as pltimport matplotlib.pyplot as plt# Plot random_walkplt.plot(random_walk)# Show the plotplt.show()[0, 3, 4, 5, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 6, 5, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 8, 9, 10, 11, 12, 11, 15, 16, 15, 16, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 33, 34, 38, 39, 38, 39, 40, 39, 40, 41, 43, 44, 45, 44, 43, 44, 45, 44, 43, 44, 45, 47, 46, 45, 46, 45, 46, 47, 48, 50, 49, 50, 51, 52, 53, 54, 53, 52, 53, 52, 53, 54, 53, 56, 57, 58, 59, 58, 59, 60]Simulate multiple walks# numpy and matplotlib imported, seed set.import numpy as npnp.random.seed(123)import matplotlib.pyplot as plt# initialize and populate all_walksall_walks = []for i in range(10) : random_walk = [0] for x in range(100) : step = random_walk[-1] dice = np.random.randint(1,7) if dice &lt;= 2: step = max(0, step - 1) elif dice &lt;= 5: step = step + 1 else: step = step + np.random.randint(1,7) random_walk.append(step) all_walks.append(random_walk)# Convert all_walks to Numpy array: np_awnp_aw = np.array(all_walks)# Plot np_aw and showplt.plot(np_aw)plt.show()# Clear the figureplt.clf()# Transpose np_aw: np_aw_tnp_aw_t = np.transpose(np_aw)# Plot np_aw_t and showplt.plot(np_aw_t)plt.show()### Implement Clumsiness# numpy and matplotlib imported, seed setimport numpy as npnp.random.seed(123)import matplotlib.pyplot as plt# Simulate random walk 250 timesall_walks = []for i in range(250) : random_walk = [0] for x in range(100) : step = random_walk[-1] dice = np.random.randint(1,7) if dice &lt;= 2: step = max(0, step - 1) elif dice &lt;= 5: step = step + 1 else: step = step + np.random.randint(1,7) # Implement clumsiness if np.random.rand() &lt;= 0.001 : step = 0 random_walk.append(step) all_walks.append(random_walk)# Create and plot np_aw_tnp_aw_t = np.transpose(np.array(all_walks))plt.plot(np_aw_t)plt.show()Notice how some random walks drop to zeroPlot the Distribution# numpy and matplotlib imported, seed setimport numpy as npnp.random.seed(123)import matplotlib.pyplot as plt# Simulate random walk 500 timesall_walks = []for i in range(500) : random_walk = [0] for x in range(100) : step = random_walk[-1] dice = np.random.randint(1,7) if dice &lt;= 2: step = max(0, step - 1) elif dice &lt;= 5: step = step + 1 else: step = step + np.random.randint(1,7) if np.random.rand() &lt;= 0.001 : step = 0 random_walk.append(step) all_walks.append(random_walk)# Create and plot np_aw_tnp_aw_t = np.transpose(np.array(all_walks))# Select last row from np_aw_t: endsends = np_aw_t[-1,]# Plot histogram of ends, display plotplt.hist(ends)plt.show()" }, { "title": "Create a website on Github using Jekyll", "url": "/posts/Create-a-website-on-Github-using-Jekyll/", "categories": "Wesbite", "tags": "tutorial", "date": "2022-10-02 17:06:30 +0200", "snippet": "Create a website like this one on Github using Jekyll!As this website is fairly new, it would be appropriate to share how I created this website using readily available and free services.Quick StartFirstly, Jekyll Docs provides instructions to install Ruby, RubyGems, Jekyll, and Bundler. You will also need to install GitStep 1 - Find a themeThere are many different paid and free themes available. I recommend spending some thought towards what you would like to achieve with your own website and in addition what you will require of the website to best assist in what would are trying to achieve.Some themes can be found at for example: GitHub.com #jekyll-theme repos jamstackthemes.dev jekyllthemes.org jekyllthemes.ioThe theme that I have chosen and quite like is the Chirpy theme.Create a new repository from the template you choose and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Step 2 - Pull the Repository to your ComputerI use and enjoy Visual Studio Code as a code editor which offers compatibility with Github. This means, any changes made to your website locally can be pushed to Github.All you need to do is connect Visual Studio Code to your Github account and pull your repository.Step 3 - Install DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleStep 4 - Running Local ServerRun the following command in the root directory of the site:bundle exec jekyll sThis will provide a local version of your website which can be viewed at http://localhost:4000/. Any changes made to your website will be presented after a simple refresh (except for changes made to the _config.yml file which will require you to run the above code again)Troubleshootingrequire: cannot load such file – webrickI came across this issue which can be resolved by adding webrick.Dealing with: `require’: cannot load such file – webrickbundle add webrick ui" } ]
